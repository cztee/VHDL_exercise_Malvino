$date
  Fri Jul 14 17:40:36 2023
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$scope module standard $end
$upscope $end
$scope module std_logic_1164 $end
$upscope $end
$scope module four_bit_adder_tb $end
$var reg 4 ! input_a[3:0] $end
$var reg 4 " input_b[3:0] $end
$var reg 5 # output[4:0] $end
$scope module uut $end
$var reg 4 $ input_a[3:0] $end
$var reg 4 % input_b[3:0] $end
$var reg 5 & output_adder[4:0] $end
$var reg 1 ' c1 $end
$var reg 1 ( c2 $end
$var reg 1 ) c3 $end
$scope module ha1 $end
$var reg 1 * half_input_1 $end
$var reg 1 + half_input_2 $end
$var reg 1 , half_out_sum $end
$var reg 1 - half_out_carry $end
$upscope $end
$scope module fa2 $end
$var reg 1 . full_input_1 $end
$var reg 1 / full_input_2 $end
$var reg 1 0 cin $end
$var reg 1 1 full_sum $end
$var reg 1 2 full_carry $end
$var reg 1 3 temp_s $end
$var reg 1 4 temp_c $end
$var reg 1 5 temp_s_and_cin $end
$upscope $end
$scope module fa3 $end
$var reg 1 6 full_input_1 $end
$var reg 1 7 full_input_2 $end
$var reg 1 8 cin $end
$var reg 1 9 full_sum $end
$var reg 1 : full_carry $end
$var reg 1 ; temp_s $end
$var reg 1 < temp_c $end
$var reg 1 = temp_s_and_cin $end
$upscope $end
$scope module fa4 $end
$var reg 1 > full_input_1 $end
$var reg 1 ? full_input_2 $end
$var reg 1 @ cin $end
$var reg 1 A full_sum $end
$var reg 1 B full_carry $end
$var reg 1 C temp_s $end
$var reg 1 D temp_c $end
$var reg 1 E temp_s_and_cin $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
b0001 !
b0011 "
b00100 #
b0001 $
b0011 %
b00100 &
1'
1(
0)
1*
1+
0,
1-
0.
1/
10
01
12
13
04
15
06
07
18
19
0:
0;
0<
0=
0>
0?
0@
0A
0B
0C
0D
0E
#2000000
b0101 !
b0101 "
b01010 #
b0101 $
b0101 %
b01010 &
0(
1)
0/
11
02
03
05
16
17
08
09
1:
1<
1@
1A
#3000000
b1100 !
b1110 "
b11010 #
b1100 $
b1110 %
b11010 &
0'
0*
0+
0-
1/
00
13
1>
1?
1B
1D
#4000000
b0000 !
b0000 "
b00000 #
b0000 $
b0000 %
b00000 &
0)
0/
01
03
06
07
0:
0<
0>
0?
0@
0A
0B
0D
